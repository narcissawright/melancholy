[gd_scene load_steps=11 format=2]

[ext_resource path="res://actor/bomb/Bomb.gd" type="Script" id=1]
[ext_resource path="res://actor/bomb/bomb_model.tscn" type="PackedScene" id=2]

[sub_resource type="Animation" id=1]
resource_name = "bomb_pull"
length = 0.166667
step = 0.0166667
tracks/0/type = "value"
tracks/0/path = NodePath("BombModel:scale")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.166667 ),
"transitions": PoolRealArray( 0.5, 1 ),
"update": 0,
"values": [ Vector3( 0.01, 0.01, 0.01 ), Vector3( 0.75, 0.75, 0.75 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("BombModel:material/0:shader_param/not_shaded")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ false ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("BombModel:visible")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("Explosion:visible")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ false ]
}

[sub_resource type="Animation" id=2]
resource_name = "explode"
length = 0.5
step = 0.0166667
tracks/0/type = "value"
tracks/0/path = NodePath("Explosion:scale")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.0666667, 0.116667, 0.166667, 0.216667, 0.266667, 0.316667, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 1, 1, 1 ), Vector3( 10, 10, 10 ), Vector3( 9.5, 9.5, 9.5 ), Vector3( 10, 10, 10 ), Vector3( 9.5, 9.5, 9.5 ), Vector3( 10, 10, 10 ), Vector3( 9.5, 9.5, 9.5 ), Vector3( 0.01, 0.01, 0.01 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Explosion:material/0:shader_param/color_lit")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.0333333, 0.0666667, 0.316667, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Color( 0.266667, 0.211765, 0.211765, 1 ), Color( 1, 1, 1, 1 ), Color( 1, 0.831373, 0.0705882, 1 ), Color( 0.741176, 0.160784, 0.160784, 1 ), Color( 0.266667, 0.211765, 0.211765, 1 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("Explosion:material/0:shader_param/color_dim")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.0333333, 0.0666667, 0.316667, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Color( 0.121569, 0.101961, 0.101961, 1 ), Color( 1, 0.796078, 0.0980392, 1 ), Color( 0.827451, 0.564706, 0.156863, 1 ), Color( 0.313726, 0.156863, 0.156863, 1 ), Color( 0.121569, 0.101961, 0.101961, 1 ) ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("ExplosionArea:monitoring")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.05, 0.366667 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ false, true, false ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("ExplosionDetector:monitoring")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ false ]
}
tracks/5/type = "value"
tracks/5/path = NodePath("ExplosionArea:monitorable")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 0, 0.05, 0.366667 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ false, true, false ]
}
tracks/6/type = "value"
tracks/6/path = NodePath("Explosion:material/0:shader_param/not_shaded")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}
tracks/7/type = "value"
tracks/7/path = NodePath("Explosion:visible")
tracks/7/interp = 1
tracks/7/loop_wrap = true
tracks/7/imported = false
tracks/7/enabled = true
tracks/7/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}
tracks/8/type = "value"
tracks/8/path = NodePath("BombModel:visible")
tracks/8/interp = 1
tracks/8/loop_wrap = true
tracks/8/imported = false
tracks/8/enabled = true
tracks/8/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ false ]
}

[sub_resource type="Animation" id=3]
resource_name = "pulse"
length = 4.0
step = 0.125
tracks/0/type = "value"
tracks/0/path = NodePath("BombModel:material/0:shader_param/color_lit")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1, 1.5, 2, 2.25, 2.5, 2.75, 3, 3.125, 3.25, 3.375, 3.5, 3.625, 3.75, 3.875, 4 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Color( 0.266667, 0.211765, 0.211765, 1 ), Color( 0.270588, 0.176471, 0.176471, 1 ), Color( 0.266667, 0.211765, 0.211765, 1 ), Color( 0.27451, 0.164706, 0.164706, 1 ), Color( 0.266667, 0.211765, 0.211765, 1 ), Color( 0.278431, 0.160784, 0.160784, 1 ), Color( 0.266667, 0.211765, 0.211765, 1 ), Color( 0.282353, 0.156863, 0.156863, 1 ), Color( 0.266667, 0.211765, 0.211765, 1 ), Color( 0.290196, 0.152941, 0.152941, 1 ), Color( 0.266667, 0.211765, 0.211765, 1 ), Color( 0.294118, 0.14902, 0.14902, 1 ), Color( 0.266667, 0.211765, 0.211765, 1 ), Color( 0.301961, 0.145098, 0.145098, 1 ), Color( 0.266667, 0.211765, 0.211765, 1 ), Color( 0.309804, 0.141176, 0.141176, 1 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("BombModel:material/0:shader_param/color_dim")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1, 1.5, 2, 2.25, 2.5, 2.75, 3, 3.125, 3.25, 3.375, 3.5, 3.625, 3.75, 3.875, 4 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Color( 0.121569, 0.101961, 0.101961, 1 ), Color( 0.12549, 0.0823529, 0.0823529, 1 ), Color( 0.121569, 0.101961, 0.101961, 1 ), Color( 0.129412, 0.0784314, 0.0784314, 1 ), Color( 0.121569, 0.101961, 0.101961, 1 ), Color( 0.129412, 0.0784314, 0.0784314, 1 ), Color( 0.121569, 0.101961, 0.101961, 1 ), Color( 0.12549, 0.0823529, 0.0823529, 1 ), Color( 0.121569, 0.101961, 0.101961, 1 ), Color( 0.129412, 0.0823529, 0.0823529, 1 ), Color( 0.121569, 0.101961, 0.101961, 1 ), Color( 0.129412, 0.0784314, 0.0784314, 1 ), Color( 0.121569, 0.101961, 0.101961, 1 ), Color( 0.129412, 0.0745098, 0.0745098, 1 ), Color( 0.121569, 0.101961, 0.101961, 1 ), Color( 0.133333, 0.0745098, 0.0745098, 1 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("ExplosionDetector:monitoring")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}

[sub_resource type="SphereShape" id=4]
radius = 1.5

[sub_resource type="SphereMesh" id=5]
radius = 0.2
height = 0.4

[sub_resource type="Shader" id=6]
code = "shader_type spatial;
render_mode shadows_disabled, ambient_light_disabled;

// RIM
uniform bool enable_rim = false;
uniform bool only_rim = false;
uniform bool not_shaded = false;
uniform bool use_vertex_color = false;

uniform vec4 color_lit : hint_color = vec4(0.5, 0.5, 0.6, 1.0);
uniform vec4 color_dim : hint_color = vec4(0.1, 0.1, 0.12, 1.0);

uniform bool damaged = false;
const vec3 damaged_lit = vec3(1.0, 0.03, 0.03);
const vec3 damaged_dim = vec3(0.5, 0.0, 0.0);

uniform bool locked = false;
const vec3 locked_lit = vec3(0.2, 0.6, 0.8);
const vec3 locked_dim = vec3(0.0, 0.3, 0.4);

void fragment() {
	if (use_vertex_color) { ALBEDO = COLOR.rgb; }
	
	// Opacity Dithering...
	int x = int(FRAGCOORD.x / 2.0) % 4;
	int y = int(FRAGCOORD.y / 2.0) % 4;
	int index = x + y * 4;
	float limit = 0.0;
	
	// Dither pattern
	switch (index) {
		case 0:  limit = 0.0625; break;
		case 1:  limit = 0.5625; break;
		case 2:  limit = 0.1875; break;
		case 3:  limit = 0.6875; break;
		case 4:  limit = 0.8125; break;
		case 5:  limit = 0.3125; break;
		case 6:  limit = 0.9375; break;
		case 7:  limit = 0.4375; break;
		case 8:  limit = 0.25;   break;
		case 9:  limit = 0.75;   break;
		case 10: limit = 0.125;  break;
		case 11: limit = 0.625;  break;
		case 12: limit = 1.0;    break;
		case 13: limit = 0.5;    break;
		case 14: limit = 0.875;  break;
		case 15: limit = 0.375;  break;
	}
	
	// Depth Test
	float depth = FRAGCOORD.z;
	vec3 ndc = vec3(SCREEN_UV, depth) * 2.0 - 1.0;
	vec4 view = INV_PROJECTION_MATRIX * vec4(ndc, 1.0);
	view.xyz /= view.w;
	float linear_depth = -view.z;
	if (linear_depth < limit) { discard; }
	
	if (enable_rim) {
		float NdotV = dot(VIEW, NORMAL);
		float rim = smoothstep(0.0, 1.0, NdotV);
		if ((only_rim) && (rim > 0.2)) { discard; } 
	}
}


void light() {
	// Cel Shading
	float NdotL = dot(LIGHT, NORMAL);
	float lit = smoothstep(0.0, 1.0, NdotL);
	
	// god I would love a way to use MULTIPLE LIGHTS with cel shading.
	//vec3 extra_light = LIGHT_COLOR * ATTENUATION;
	
	vec3 final_lit;
	vec3 final_dim;
	
	if (damaged) {
		final_lit = damaged_lit;
		final_dim = damaged_dim;
	} else if (locked) {
		final_lit = locked_lit;
		final_dim = locked_dim;
	} else if (use_vertex_color) {
		final_lit = ALBEDO;
		final_dim = ALBEDO * 0.5;
	} else {
		final_lit = color_lit.rgb;
		final_dim = color_dim.rgb;
	}
	
	if (not_shaded) { lit = 1.0; }
	
	if (enable_rim) {
		float NdotV = dot(VIEW, NORMAL);
		float rim = smoothstep(0.0, 1.0, NdotV);
		if (rim < 0.2) { lit = 0.0; } 
	}
	
	
	if (lit > 0.5) { 
		DIFFUSE_LIGHT = final_lit; 
	} else { 
		DIFFUSE_LIGHT = final_dim;
	}
	
}"

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 6 )
shader_param/enable_rim = true
shader_param/only_rim = false
shader_param/not_shaded = true
shader_param/use_vertex_color = false
shader_param/color_lit = Color( 0.266667, 0.211765, 0.211765, 1 )
shader_param/color_dim = Color( 0.121569, 0.101961, 0.101961, 1 )
shader_param/damaged = false
shader_param/locked = false

[sub_resource type="SphereShape" id=8]
radius = 0.15

[node name="Bomb" type="Position3D"]
script = ExtResource( 1 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/bomb_pull = SubResource( 1 )
anims/explode = SubResource( 2 )
anims/pulse = SubResource( 3 )

[node name="ExplosionArea" type="Area" parent="."]
monitoring = false
monitorable = false
collision_layer = 8
collision_mask = 2

[node name="Shape" type="CollisionShape" parent="ExplosionArea"]
shape = SubResource( 4 )

[node name="Explosion" type="MeshInstance" parent="."]
visible = false
layers = 2
mesh = SubResource( 5 )
material/0 = SubResource( 7 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 1, 0, 0, 0, 0.697503, 0.716582, 0, -0.716582, 0.697503, 0, 10.4521, 1.59155 )
editor_only = true

[node name="ExplosionDetector" type="Area" parent="."]
monitoring = false
monitorable = false
collision_layer = 0
collision_mask = 8

[node name="Shape" type="CollisionShape" parent="ExplosionDetector"]
shape = SubResource( 8 )

[node name="BombModel" parent="." instance=ExtResource( 2 )]
transform = Transform( 0.649519, -0.375, 0, 0.375, 0.649519, 0, 0, 0, 0.75, 0, 0, 0 )
[connection signal="animation_finished" from="AnimationPlayer" to="." method="_animation_finished"]
[connection signal="body_entered" from="ExplosionArea" to="." method="_on_ExplosionHit"]
[connection signal="area_entered" from="ExplosionDetector" to="." method="_on_ExplosionDetected"]
