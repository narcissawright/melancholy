[gd_resource type="ShaderMaterial" load_steps=8 format=2]

[ext_resource path="res://player/melanie/noiseTexture_shade.png" type="Texture" id=1]
[ext_resource path="res://player/melanie/texture_shade.png" type="Texture" id=2]
[ext_resource path="res://player/melanie/texture_lit.png" type="Texture" id=3]
[ext_resource path="res://player/melanie/noiseTexture.png" type="Texture" id=4]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode cull_front, unshaded;

uniform float opacity = 1.0;
uniform float outline_width = 1.75;
uniform sampler2D tex_shaded : hint_albedo;
uniform sampler2D tex2_shaded : hint_albedo;

void vertex() {
	vec4 clip_position = PROJECTION_MATRIX * (MODELVIEW_MATRIX * vec4(VERTEX, 1.0));
	vec3 clip_normal = mat3(PROJECTION_MATRIX) * (mat3(MODELVIEW_MATRIX) * NORMAL);

	vec2 offset = normalize(clip_normal.xy) / VIEWPORT_SIZE * clip_position.w * outline_width * 2.0;

	clip_position.xy += offset;

	POSITION = clip_position;
}

void fragment() {
	
		// Opacity Dithering...
	int x = int(FRAGCOORD.x / 2.0) % 4;
	int y = int(FRAGCOORD.y / 2.0) % 4;
	int index = x + y * 4;
	float limit = 0.0;
	
	// Dither pattern
	switch (index) {
		case 0:  limit = 0.0625; break;
		case 1:  limit = 0.5625; break;
		case 2:  limit = 0.1875; break;
		case 3:  limit = 0.6875; break;
		case 4:  limit = 0.8125; break;
		case 5:  limit = 0.3125; break;
		case 6:  limit = 0.9375; break;
		case 7:  limit = 0.4375; break;
		case 8:  limit = 0.25;   break;
		case 9:  limit = 0.75;   break;
		case 10: limit = 0.125;  break;
		case 11: limit = 0.625;  break;
		case 12: limit = 1.0;    break;
		case 13: limit = 0.5;    break;
		case 14: limit = 0.875;  break;
		case 15: limit = 0.375;  break;
	}
	
	// discard rule
	if (opacity < limit) { discard; }
	
	// Depth Test
	float depth = FRAGCOORD.z;
	vec3 ndc = vec3(SCREEN_UV, depth) * 2.0 - 1.0;
	vec4 view = INV_PROJECTION_MATRIX * vec4(ndc, 1.0);
	view.xyz /= view.w;
	float linear_depth = -view.z * 2.0; // this *2 is experiment
	
	vec3 texture_color = texture(tex_shaded, UV).rgb;
	
	if (COLOR.b > 0.0) {
		texture_color = texture(tex2_shaded, UV).rgb;
	}
	
	if (COLOR.r == 0.0) {
		ALPHA = 0.0;
	} else {
		//ALBEDO = texture_color * 0.75 - vec3(0.05, 0.05, 0.03);
		float inverse_depth = (1.0 / linear_depth);
		ALBEDO = texture_color * min(inverse_depth, 0.6);
		ALPHA = 1.0 / linear_depth * 1.5;
	}
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/opacity = 1.0
shader_param/outline_width = 1.75
shader_param/tex_shaded = ExtResource( 2 )
shader_param/tex2_shaded = ExtResource( 1 )

[sub_resource type="Shader" id=3]
code = "shader_type spatial;
render_mode ambient_light_disabled;

uniform float opacity = 1.0;

uniform sampler2D tex_lit : hint_albedo;
uniform sampler2D tex_shaded : hint_albedo;

uniform sampler2D cardigan_lit : hint_albedo;
uniform sampler2D cardigan_shaded: hint_albedo;

uniform bool damaged = false;
const vec3 damaged_lit = vec3(1.0, 0.03, 0.03);
const vec3 damaged_dim = vec3(0.5, 0.0, 0.0);

uniform bool locked = false;
const vec3 locked_lit = vec3(0.2, 0.6, 0.8);
const vec3 locked_dim = vec3(0.0, 0.3, 0.4);

void fragment() {
	ALBEDO = COLOR.rgb;
	// Opacity Dithering...
	int x = int(FRAGCOORD.x / 2.0) % 4;
	int y = int(FRAGCOORD.y / 2.0) % 4;
	int index = x + y * 4;
	float limit = 0.0;
	
	// Dither pattern
	switch (index) {
		case 0:  limit = 0.0625; break;
		case 1:  limit = 0.5625; break;
		case 2:  limit = 0.1875; break;
		case 3:  limit = 0.6875; break;
		case 4:  limit = 0.8125; break;
		case 5:  limit = 0.3125; break;
		case 6:  limit = 0.9375; break;
		case 7:  limit = 0.4375; break;
		case 8:  limit = 0.25;   break;
		case 9:  limit = 0.75;   break;
		case 10: limit = 0.125;  break;
		case 11: limit = 0.625;  break;
		case 12: limit = 1.0;    break;
		case 13: limit = 0.5;    break;
		case 14: limit = 0.875;  break;
		case 15: limit = 0.375;  break;
	}
	
	if (opacity < limit) { discard; }
}


void light() {
	// Cel Shading
	float NdotL = dot(LIGHT, NORMAL);
	float lit = clamp(NdotL, 0.0, 1.0); //smoothstep(0.0, 1.0, NdotL);
	
	vec3 final_lit;
	vec3 final_dim;
	
	final_lit = texture(tex_lit, UV).rgb;
	final_dim = texture(tex_shaded, UV).rgb;
	
	if (ALBEDO.g > 0.0) {
		// if green flag is on, use tights shading.
		float NdotV = dot(VIEW, NORMAL);
		NdotV = clamp(NdotV, 0.35, 1.0);
		vec3 skin_color = vec3(0.823, 0.479, 0.578);
		vec3 skin_color2 = vec3(0.796, 0.557, 0.627);
		final_lit = mix(final_lit, skin_color * NdotV, 0.02);
		final_dim = mix(final_dim, skin_color2 * NdotV, 0.02);
	}
	
	else if (ALBEDO.b > 0.0) {
		// if blue flag is on, use cardigan texture instead.
		final_lit = texture(cardigan_lit, UV).rgb;
		final_dim = texture(cardigan_shaded, UV).rgb;
	}
	
	vec3 final_diff = final_lit - final_dim;
	vec3 light_energy = min(vec3(1,1,1), ATTENUATION * LIGHT_COLOR);
	final_diff *= light_energy; // min(final_diff, final_diff + light_energy);
	
	if (damaged) {
		final_lit = damaged_lit;
		final_dim = damaged_dim;
	} else if (locked) {
		final_lit = locked_lit;
		final_dim = locked_dim;
	}
	
	float occlusion = pow(ALBEDO.r, 0.45188);
	
	lit = smoothstep(0.425, 0.575, lit + (occlusion - 0.5));
	vec3 final_value = mix(final_dim, final_dim + final_diff, lit);
	
	 DIFFUSE_LIGHT = max(DIFFUSE_LIGHT, final_value);
}
"

[resource]
next_pass = SubResource( 2 )
shader = SubResource( 3 )
shader_param/opacity = 1.0
shader_param/damaged = false
shader_param/locked = false
shader_param/tex_lit = ExtResource( 3 )
shader_param/tex_shaded = ExtResource( 2 )
shader_param/cardigan_lit = ExtResource( 4 )
shader_param/cardigan_shaded = ExtResource( 1 )
